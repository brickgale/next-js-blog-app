// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    binaryTargets = env("BINARY_TARGET") // Use this to set the binary target for your Prisma Client
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    password    String
    email       String @unique
    posts       Post[]
    accounts    Account[]
    sessions    Session[]

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

model Post {
    id                  String @id @default(auto()) @map("_id") @db.ObjectId
    title               String
    slug                String @unique
    description         String
    content             String
    published           Boolean @default(false)
    author              User @relation(fields: [authorId], references: [id])
    authorId            String @db.ObjectId

    updatedAt           DateTime @updatedAt
    createdAt           DateTime @default(now())

    @@unique([authorId, slug])
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier   String
    token        String
    expires      DateTime

    @@unique([identifier, token])
}